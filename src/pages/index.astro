---
import "../global.css";
import CookieBanner from "../components/CookieBanner.astro"
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Resort Credit Calculator</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,300;0,400;0,700;1,300;1,400;1,700&family=Playfair+Display:ital,wght@0,400..900;1,400..900&display=swap"
      rel="stylesheet"
    />
  </head>
  <body class="space-y-12">
    <div class="max-w-2xl mx-auto p-3 sm:p-8 space-y-6">
      <h1 class="text-center title text-3xl font-semibold">
        Resort Credit Calculator
      </h1>
      <div>
        <form class="flex justify-center gap-x-3">
          <button
            data-decrease
            type="button"
            class="font-semibold text-xl bg-gradient-to-b from-white to-gray-200 border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-100 align-middle p-4 w-2 h-2 rounded-full flex justify-center items-center"
            >-</button
          >
          <input
            min="3"
            max="10"
            value="3"
            required
            data-current
            class="w-full max-w-[3.2rem] border border-blue-950 p-1 rounded font-semibold text-center bg-slate-100 invalid:border-red-600 invalid:text-red-800 invalid:outline-red-600 text-lg"
            type="number"
            name="amount"
            autocomplete="off"
          />
          <button
            data-increase
            type="button"
            class="font-semibold text-xl bg-gradient-to-b from-white to-gray-200 border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-100 align-middle p-4 w-2 h-2 rounded-full flex justify-center items-center"
            >+</button
          >
        </form>
        <p class="text-center font-medium">Nights</p>
      </div>

      <div class="relative overflow-x-auto">
        <table class="w-full text-left">
          <thead class="text-gray-700 uppercase bg-gray-50">
            <tr>
              <th scope="col" class="px-6 py-3"> Room</th>
              <th data-night-amount scope="col" class="px-6 py-3 text-right"
              ></th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </div>
      <p class="text-center text-inherit/30 text-sm">
        Terms and Conditions for Resort Credit
      </p>
    </div>
    <CookieBanner />
  </body>
</html>

<script>
  import data from "../HotelRoomDetails.json";

  // Get references to form elements
  const form = document.querySelector<HTMLFormElement>("form");
  const decreaseButton =
    document.querySelector<HTMLButtonElement>("[data-decrease]");
  const increaseButton =
    document.querySelector<HTMLButtonElement>("[data-increase]");
  const currentInput =
    document.querySelector<HTMLInputElement>("[data-current]");
  const nightAmount = document.querySelector<HTMLParagraphElement>(
    "[data-night-amount]"
  );

  // Extract room data from JSON file
  const rooms = data.en[1].rooms;

  // Define types for room and room credit key
  type Room = (typeof rooms)["room1"];
  type RoomCreditKey = keyof Room["resort_credits_nights"];

  // Prevent default form submission behaviour
  form?.addEventListener("submit", (event) => {
    event.preventDefault();
  });

  // Update input value and render table rows on initial load
  const inputValue = Number(currentInput?.value);
  updateInput(inputValue.toString());

  // Validate input on input change
  currentInput?.addEventListener("input", (e) => {
    const isInputValid = currentInput?.checkValidity();
    if (!isInputValid) {
      form?.reportValidity();
    }
  });

  // Increase button click event handler
  increaseButton?.addEventListener("click", () => {
    const limit = Number(currentInput?.getAttribute("max"));
    const currentValue = Number(currentInput?.value);

    const isRangeOverflow = currentInput?.validity.rangeOverflow;
    const isRangeUnderflow = currentInput?.validity.rangeUnderflow;
    const newValue = Math.min(limit, currentValue + 1);
    if (isRangeOverflow) {
      form?.reportValidity();
    } else if (isRangeUnderflow) {
      updateInput(newValue.toString());
      form?.reportValidity();
    } else {
      updateInput(newValue.toString());
    }
  });

  // Decrease button click event handler
  decreaseButton?.addEventListener("click", () => {
    const limit = Number(currentInput?.getAttribute("min"));
    const currentValue = Number(currentInput?.value);

    const isRangeUnderflow = currentInput?.validity.rangeUnderflow;
    const isRangeOverflow = currentInput?.validity.rangeOverflow;
    const newValue = Math.max(limit, currentValue - 1);

    if (isRangeUnderflow) {
      form?.reportValidity();
    } else if (isRangeOverflow) {
      updateInput(newValue.toString());
      form?.reportValidity();
    } else {
      updateInput(newValue.toString());
    }
  });

  // Update input value and render table rows
  function updateInput(value: string) {
    if (!currentInput || !nightAmount) return;

    currentInput.value = value;
    nightAmount.textContent = `${value} Nights`;

    // clear previous tbody value
    const tbody = document.querySelector("tbody") as HTMLTableSectionElement;
    tbody.innerHTML = "";
    renderTableRows(value);
  }

  // Render table rows based on input value
  function renderTableRows(inputValue: string) {
    const isFormValid = form?.checkValidity();
    if (!isFormValid) return;
    Object.entries(rooms).forEach(([roomKey, room]) => {
      const areResortCredits = room.resort_credits === "true";
      renderTableRow({
        roomName: room.name,
        resortCreditAmount:
          room.resort_credits_nights[inputValue as RoomCreditKey],
        areResortCredits,
      });
    });
  }

  type RenderTableRowProps = {
    roomName: string;
    resortCreditAmount: string;
    areResortCredits: boolean;
  };

  // Function to render a table row
  // Parameters:
  // - roomName: The name of the room
  // - resortCreditAmount: The amount of resort credit
  // - areResortCredits: Indicates if there are resort credits for the room
  function renderTableRow({
    roomName,
    resortCreditAmount,
    areResortCredits,
  }: RenderTableRowProps) {
    const tr = document.createElement("tr");
    tr.classList.add("bg-white", "border-b");

    const th = document.createElement("th");
    th.scope = "row";
    th.classList.add("px-6", "py-4");
    if (!areResortCredits) {
      th.classList.add("text-fade");
      th.title = "No credits"; // Display a tooltip if there are no resort credits
    }
    th.textContent = roomName;

    const td = document.createElement("td");
    td.classList.add("px-6", "py-4", "text-right", "text-sm");
    if (!areResortCredits) {
      td.classList.add("text-fade");
      td.title = "No credits"; // Display a tooltip if there are no resort credits
    }

    if (resortCreditAmount) {
      const span = document.createElement("span");
      span.classList.add("font-bold", "text-base");
      span.textContent = `$${resortCreditAmount}`;

      const span2 = document.createElement("span");
      span2.textContent = " /USD";

      td.appendChild(span);
      td.appendChild(span2);
    }

    tr.appendChild(th);
    tr.appendChild(td);

    document.querySelector("tbody")?.appendChild(tr);
  }
</script>
